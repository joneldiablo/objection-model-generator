{"version":3,"sources":["../src/ObjectionModelGenerator.js"],"names":["dataTypes","dataType","DATA_TYPE","columnType","COLUMN_TYPE","isNullable","IS_NULLABLE","toReturn","dataFormats","searchFilter","word","column","exceptions","includes","singularize","words","toLowerCase","split","map","p7e","singular","w","join","capitalize","charAt","toUpperCase","slice","camelCase","replace","g","pluralize","ObjectionModelGenerator","credentials","dbName","dbKnexObjectPath","dbFile","knex","client","connection","database","on","console","log","i","sql","data","bindings","Model","prefix","pt","path","__dirname","mht","mt","templateModelHeader","fs","readFile","templateModel","models","Mustache","render","TableModel","cns","KeyColumnUsage","query","whereNotNull","andWhere","promiseTable","where","tables","eager","classModelNames","classes","forEach","table","modelName","TABLE_NAME","constrains","requireds","searches","tableName","properties","columns","push","filter","cn","COLUMN_NAME","COLUMN_DEFAULT","type","format","name","JSON","stringify","items","match","relations","referenced","REFERENCED_TABLE_NAME","targetTableName","REFERENCED_COLUMN_NAME","targetModel","targetColumn","p","version"],"mappings":"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","file":"ObjectionModelGenerator.js","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport pluralize from 'pluralize';\nimport Mustache from 'mustache';\nimport Knex from 'knex';\nimport {\n  Model\n} from 'objection';\n\nimport { version } from \"../package.json\";\nimport {\n  KeyColumnUsage,\n  TableModel\n} from './models';\n\nconst dataTypes = ({ DATA_TYPE: dataType, COLUMN_TYPE: columnType, IS_NULLABLE: isNullable }) => {\n  /* \n   * Possible types in database\n   * ================\n   * varchar    bigint    longtext\n   * datetime    int    tinyint\n   * decimal    double    tinytext\n   * text    timestamp    date\n   * mediumtext    float    smallint\n   * char    enum    blob\n   * longblob    set \n   * \n   * Types available in json schema\n   * string    number    object\n   * array    boolean    null\n   * integer    any\n   * \n   */\n  let toReturn = '';\n  switch (dataType) {\n    case 'varchar':\n    case 'tinytext':\n    case 'text':\n    case 'mediumtext':\n    case 'char':\n    case 'enum':\n    case 'date':\n    case 'datetime':\n      toReturn = 'string';\n      break;\n    case 'tinyint':\n      if (columnType === 'tinyint(1) unsigned')\n        toReturn = 'boolean';\n      else toReturn = 'integer';\n      break;\n    case 'bigint':\n    case 'int':\n    case 'smallint':\n    case 'timestamp':\n      toReturn = 'integer';\n      break;\n    case 'decimal':\n    case 'double':\n    case 'float':\n      toReturn = 'number';\n      break;\n    case 'blob':\n    case 'longblob':\n    case 'longtext':\n    case 'json':\n      toReturn = 'object';\n      break;\n    default:\n      toReturn = 'any';\n      break;\n  }\n  if (isNullable === 'YES') {\n    return [toReturn, 'null'];\n  }\n  return toReturn;\n};\n\nconst dataFormats = ({ DATA_TYPE: dataType }) => {\n  switch (dataType) {\n    case 'datetime':\n      return 'date-time';\n    case 'date':\n    case 'time':\n    //return dataType;\n    default:\n      break;\n  }\n}\n\nconst searchFilter = (word, column) => {\n  const exceptions = ['blob', 'longblob', 'longtext', 'time', 'datetime', 'date', 'json'];\n  if (exceptions.includes(column.DATA_TYPE)) return false;\n  if (word.includes('schema')) return false;\n  switch (word) {\n    case 'old_password':\n    case 'password':\n    case 'pass':\n    case 'token':\n    case 'created_at':\n    case 'updated_at':\n      return false\n    default:\n      return true;\n  }\n};\n\nconst singularize = (word) => {\n  let words = word.toLowerCase().split(/[_\\- ]/);\n  return words.map(w => p7e.singular(w)).join('-');\n};\n\nconst capitalize = (word) => word.charAt(0).toUpperCase() + word.slice(1);\n\nconst camelCase = (word) => word.toLowerCase()\n  .replace(/[-_]+/g, '-')\n  .replace(/-([a-z0-9])/g, g => g[1].toUpperCase())\n  .replace(/-([a-z0-9])/g, g => g[1].toUpperCase())\n  .replace(/-([a-z0-9])/g, g => g[1].toUpperCase());\n\nlet p7e = pluralize;\n\nexport default class ObjectionModelGenerator {\n\n  /**\n   * \n   * @param {*} credentials \n   * @param {*} credentials.user\n   * @param {*} credentials.password\n   * @param {*} credentials.host\n   * @param {*} credentials.port\n   * @param {*} dbName \n   * @param {*} dbKnexObjectPath \n   * @param {*} outputFilePath \n   */\n  constructor(credentials = {}, dbName, dbKnexObjectPath) {\n    this.dbName = dbName;\n    this.dbFile = dbKnexObjectPath;\n\n    // Initialize knex.\n    const knex = Knex({\n      client: 'mysql2',\n      connection: {\n        ...credentials,\n        database: 'information_schema'\n      }\n    });\n\n    knex.on('query', data => {\n      console.log('======== on query ==========');\n      let i = 0;\n      let sql = data.sql.replace(/\\?/g, k => {\n        return '\"' + data.bindings[i++] + '\"';\n      });\n      console.log(sql);\n    });\n    Model.knex(knex);\n  }\n\n  async createModels(prefix) {\n    let {\n      dbName,\n      dbFile\n    } = this;\n    let pt = path.join(__dirname, '../templates/');\n    let mht = path.join(pt, 'modelHeaderTemplate.mustache');\n    let mt = path.join(pt, 'modelTemplate.mustache');\n    let templateModelHeader = await fs.readFile(mht, 'UTF-8');\n    let templateModel = await fs.readFile(mt, 'UTF-8');\n\n    let models = Mustache.render(templateModelHeader, {\n      dbFile\n    });\n    TableModel.dbName = dbName;\n    let cns = await KeyColumnUsage.query()\n      .whereNotNull('REFERENCED_COLUMN_NAME')\n      .andWhere('table_schema', '=', dbName);\n    let promiseTable = TableModel.query()\n      .where('table_schema', '=', dbName);\n    if (prefix) {\n      promiseTable = promiseTable\n        .andWhere('table_name', 'like', prefix + '%');\n    }\n    let tables = await promiseTable.eager('[columns]');\n\n\n    let classModelNames = {\n      classes: [],\n      dbFile\n    };\n    tables.forEach(async table => {\n      let modelName = singularize(table.TABLE_NAME);\n      modelName = camelCase(modelName);\n      modelName = capitalize(modelName);\n      let constrains = [];\n      let requireds = [];\n      let searches = [];\n      let data = {\n        modelName: modelName + 'Model',\n        tableName: table.TABLE_NAME,\n        properties: table.columns.map(column => {\n          constrains.push(...cns.filter(cn =>\n            table.TABLE_NAME === cn.TABLE_NAME\n            && column.COLUMN_NAME === cn.COLUMN_NAME));\n          if (column.IS_NULLABLE === 'NO' && !column.COLUMN_DEFAULT && column.COLUMN_NAME !== 'id') {\n            requireds.push(column.COLUMN_NAME);\n          }\n          const type = dataTypes(column);\n          const format = dataFormats(column);\n\n          if (type.includes('string') && searchFilter(column.COLUMN_NAME, column)) {\n            searches.push(column.COLUMN_NAME);\n          }\n          return {\n            name: column.COLUMN_NAME,\n            type: JSON.stringify(type),\n            format,\n            items: column.DATA_TYPE === 'enum' &&\n              column.COLUMN_TYPE.match(/enum\\((.*)\\)/)[1]\n          }\n        }),\n        requireds: JSON.stringify(requireds),\n        searches: JSON.stringify(searches),\n        relations: constrains.map(column => {\n          let referenced = singularize(column.REFERENCED_TABLE_NAME);\n          let targetTableName =\n            singularize(column.COLUMN_NAME.replace('_' + column.REFERENCED_COLUMN_NAME, ''));\n          if (referenced != targetTableName) targetTableName = targetTableName + '_' + referenced;\n          targetTableName = camelCase(targetTableName);\n          referenced = camelCase(referenced);\n\n          return {\n            name: targetTableName,\n            column: column.COLUMN_NAME,\n            targetModel: capitalize(referenced) + 'Model',\n            targetTableName: column.REFERENCED_TABLE_NAME,\n            targetColumn: column.REFERENCED_COLUMN_NAME\n          }\n        })\n      }\n      classModelNames.classes.push(data);\n    });\n    models += Mustache.render(templateModel, classModelNames);\n    return models;\n  };\n\n  set pluralize(p) {\n    p7e = p;\n  }\n\n  get version() {\n    return version;\n  }\n}\n"]}