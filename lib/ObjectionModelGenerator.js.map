{"version":3,"sources":["../src/ObjectionModelGenerator.js"],"names":["dataTypes","type","searchFilter","word","singularize","words","toLowerCase","split","map","pluralize","singular","w","join","capitalize","charAt","toUpperCase","slice","camelCase","replace","g","ObjectionModelGenerator","credentials","dbName","dbKnexObjectPath","dbFile","knex","client","connection","database","on","console","log","i","sql","data","bindings","Model","prefix","pt","path","__dirname","mht","mt","templateModelHeader","fs","readFile","templateModel","models","Mustache","render","TableModel","cns","KeyColumnUsage","query","whereNotNull","andWhere","promiseTable","where","tables","eager","classModelNames","classes","forEach","table","modelName","TABLE_NAME","constrains","requireds","searches","tableName","properties","columns","push","filter","cn","column","COLUMN_NAME","IS_NULLABLE","COLUMN_DEFAULT","DATA_TYPE","name","relations","targetTableName","REFERENCED_TABLE_NAME","targetModel","targetColumn","REFERENCED_COLUMN_NAME","version"],"mappings":"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","file":"ObjectionModelGenerator.js","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport pluralize from 'pluralize';\nimport Mustache from 'mustache';\nimport Knex from 'knex';\nimport {\n  Model\n} from 'objection';\n\nimport { version } from \"../package.json\";\nimport {\n  KeyColumnUsage,\n  TableModel\n} from './models';\nimport { constants } from 'zlib';\n\nconst dataTypes = (type) => {\n  /* \n   * Possible types in database\n   * ================\n   * varchar    bigint    longtext\n   * datetime    int    tinyint\n   * decimal    double    tinytext\n   * text    timestamp    date\n   * mediumtext    float    smallint\n   * char    enum    blob\n   * longblob    set \n   * \n   * Types available in json schema\n   * string    number    object\n   * array    boolean    null\n   * integer    any\n   * \n   */\n  switch (type) {\n    case 'varchar':\n    case 'longtext':\n    case 'tinytext':\n    case 'text':\n    case 'mediumtext':\n    case 'char':\n      return 'string';\n    case 'date':\n      return 'date';\n    case 'datetime':\n      return 'date-time';\n    case 'bigint':\n    case 'int':\n    case 'tinyint':\n    case 'smallint':\n    case 'timestamp':\n      return 'integer';\n    case 'decimal':\n    case 'double':\n    case 'float':\n      return 'number';\n    default:\n      return 'any';\n  }\n};\n\nconst searchFilter = (word) => {\n  switch (word) {\n    case 'old_password':\n    case 'password':\n    case 'token':\n      return false\n    default:\n      return true;\n  }\n};\n\nconst singularize = (word) => {\n  let words = word.toLowerCase().split(/[_\\- ]/);\n  return words.map(w => pluralize.singular(w)).join('-');\n};\n\nconst capitalize = (word) => word.charAt(0).toUpperCase() + word.slice(1);\n\nconst camelCase = (word) => word.toLowerCase()\n  .replace(/[-_]([a-z0-9])/g, g => g[1].toUpperCase());\n\nexport default class ObjectionModelGenerator {\n\n  /**\n   * \n   * @param {*} credentials \n   * @param {*} credentials.user\n   * @param {*} credentials.password\n   * @param {*} credentials.host\n   * @param {*} credentials.port\n   * @param {*} dbName \n   * @param {*} dbKnexObjectPath \n   * @param {*} outputFilePath \n   */\n  constructor(credentials = {}, dbName, dbKnexObjectPath) {\n    this.dbName = dbName;\n    this.dbFile = dbKnexObjectPath;\n\n    // Initialize knex.\n    const knex = Knex({\n      client: 'mysql2',\n      connection: {\n        ...credentials,\n        database: 'information_schema'\n      }\n    });\n\n    knex.on('query', data => {\n      console.log('======== on query ==========');\n      let i = 0;\n      let sql = data.sql.replace(/\\?/g, k => {\n        return '\"' + data.bindings[i++] + '\"';\n      });\n      console.log(sql);\n    });\n    Model.knex(knex);\n  }\n\n  async createModels(prefix) {\n    let {\n      dbName,\n      dbFile\n    } = this;\n    let pt = path.join(__dirname, '../templates/');\n    let mht = path.join(pt, 'modelHeaderTemplate.mustache');\n    let mt = path.join(pt, 'modelTemplate.mustache');\n    let templateModelHeader = await fs.readFile(mht, 'UTF-8');\n    let templateModel = await fs.readFile(mt, 'UTF-8');\n\n    let models = Mustache.render(templateModelHeader, {\n      dbFile\n    });\n    TableModel.dbName = dbName;\n    let cns = await KeyColumnUsage.query()\n      .whereNotNull('REFERENCED_COLUMN_NAME')\n      .andWhere('table_schema', '=', dbName);\n    let promiseTable = TableModel.query()\n      .where('table_schema', '=', dbName);\n    if (prefix) {\n      promiseTable = promiseTable\n        .andWhere('table_name', 'like', prefix + '%');\n    }\n    let tables = await promiseTable.eager('[columns]');\n\n\n    let classModelNames = {\n      classes: [],\n      dbFile\n    };\n    tables.forEach(async table => {\n      let modelName = singularize(table.TABLE_NAME);\n      modelName = camelCase(modelName);\n      modelName = capitalize(modelName);\n      let constrains = [];\n      let requireds = [];\n      let searches = [];\n      let data = {\n        modelName: modelName + 'Model',\n        tableName: table.TABLE_NAME,\n        properties: table.columns.map(column => {\n          constrains.push(...cns.filter(cn =>\n            table.TABLE_NAME === cn.TABLE_NAME\n            && column.COLUMN_NAME === cn.COLUMN_NAME));\n          if (column.IS_NULLABLE === 'NO' && !column.COLUMN_DEFAULT && column.COLUMN_NAME !== 'id') {\n            requireds.push(column.COLUMN_NAME);\n          }\n          let type = dataTypes(column.DATA_TYPE);\n          if (type === 'string' && searchFilter(column.COLUMN_NAME)) {\n            searches.push(column.COLUMN_NAME);\n          }\n          return {\n            name: column.COLUMN_NAME,\n            type: type\n          }\n        }),\n        requireds,\n        searches,\n        relations: constrains.map(column => {\n          let targetTableName = singularize(column.REFERENCED_TABLE_NAME);\n          targetTableName = camelCase(targetTableName);\n\n          return {\n            name: targetTableName,\n            column: column.COLUMN_NAME,\n            targetModel: capitalize(targetTableName) + 'Model',\n            targetTableName: column.REFERENCED_TABLE_NAME,\n            targetColumn: column.REFERENCED_COLUMN_NAME\n          }\n        })\n      }\n      classModelNames.classes.push(data);\n    });\n    models += Mustache.render(templateModel, classModelNames);\n    return models;\n  };\n\n  get version() {\n    return version;\n  }\n}\n"]}