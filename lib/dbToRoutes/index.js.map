{"version":3,"sources":["../../src/dbToRoutes/index.js"],"names":["require","Model","Knex","fs","path","Mustache","pluralize","module","exports","dbName","dbConnection","fileNameRoutes","DB","knex","client","connection","database","on","console","log","i","sql","data","replace","bindings","KeyColumnUsage","ColumnModel","constrain","relation","BelongsToOneRelation","modelClass","filter","query","where","whereNotNull","join","from","to","TableModel","columns","HasManyRelation","slugging","word","words","toLowerCase","split","capitalize","charAt","toUpperCase","slice","camelCase","g","templateRoutes","readFileSync","__dirname","tables","eager","routes","forEach","name","table","TABLE_NAME","startsWith","nameSnake","singular","routesPerController","route","controller","push","sort","a","b","rendered","render","writeFileSync"],"mappings":"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","file":"index.js","sourcesContent":["const { Model } = require('objection');\r\nconst Knex = require('knex');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst Mustache = require('mustache');\r\nconst pluralize = require('pluralize');\r\n\r\nmodule.exports = async (dbName, dbConnection, fileNameRoutes) => {\r\n  const DB = dbName;\r\n  // Initialize knex.\r\n  const knex = Knex({\r\n    client: 'mysql',\r\n    connection: { ...dbConnection, database: 'information_schema' }\r\n  });\r\n  knex.on('query', data => {\r\n    console.log('======== on query ==========');\r\n    let i = 0;\r\n    let sql = data.sql.replace(/\\?/g, k => {\r\n      return '\"' + data.bindings[i++] + '\"';\r\n    });\r\n    console.log(sql);\r\n  });\r\n  Model.knex(knex);\r\n\r\n  class KeyColumnUsage extends Model {\r\n    static get tableName() {\r\n      return 'KEY_COLUMN_USAGE';\r\n    }\r\n  }\r\n\r\n  class ColumnModel extends Model {\r\n    static get tableName() {\r\n      return 'COLUMNS';\r\n    }\r\n    static get relationMappings() {\r\n      return {\r\n        constrain: {\r\n          relation: Model.BelongsToOneRelation,\r\n          modelClass: KeyColumnUsage,\r\n          filter: query => query.where('TABLE_SCHEMA', DB).whereNotNull('REFERENCED_COLUMN_NAME'),\r\n          join: {\r\n            from: ['COLUMNS.COLUMN_NAME', 'COLUMNS.TABLE_NAME'],\r\n            to: ['KEY_COLUMN_USAGE.COLUMN_NAME', 'KEY_COLUMN_USAGE.TABLE_NAME']\r\n          }\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  class TableModel extends Model {\r\n    static get tableName() {\r\n      return 'TABLES';\r\n    }\r\n    static get relationMappings() {\r\n      return {\r\n        columns: {\r\n          relation: Model.HasManyRelation,\r\n          modelClass: ColumnModel,\r\n          filter: query => query.where('TABLE_SCHEMA', DB),\r\n          join: {\r\n            from: 'TABLES.TABLE_NAME',\r\n            to: 'COLUMNS.TABLE_NAME'\r\n          }\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  const slugging = (word) => {\r\n    let words = word.toLowerCase().split(/[_\\- ]/);\r\n    // TODO: mejorar remplazo de caracteres, ver functions en dbl-components\r\n    return words.join('-');\r\n  };\r\n  const capitalize = (word) => word.charAt(0).toUpperCase() + word.slice(1);\r\n  const camelCase = (word) => word.toLowerCase()\r\n    .replace(/[-_]([a-z0-9])/g, g => g[1].toUpperCase());\r\n\r\n  let templateRoutes = fs.readFileSync(path.join(__dirname, 'templates/routesTemplate.mustache'), 'UTF-8');\r\n  let tables = await TableModel.query().where('table_schema', '=', DB).eager('[columns.[constrain]]');\r\n  let routes = [];\r\n  tables.forEach(table => {\r\n    let name = slugging(table.TABLE_NAME);\r\n    if (name.startsWith('-')) return;\r\n    const nameSnake = pluralize.singular(capitalize(camelCase(name)));\r\n    let routesPerController = [\r\n      {\r\n        route: `GET /${name}`,\r\n        controller: `${nameSnake}.get`\r\n      },\r\n      {\r\n        route: `GET /${name}/:ID`,\r\n        controller: `${nameSnake}.getByID`\r\n      },\r\n      {\r\n        route: `POST /${name}`,\r\n        controller: `${nameSnake}.set`\r\n      },\r\n      {\r\n        route: `PATCH /${name}/:ID`,\r\n        controller: `${nameSnake}.update`\r\n      },\r\n      {\r\n        route: `DELETE /${name}/:ID`,\r\n        controller: `${nameSnake}.delete`\r\n      }\r\n    ]\r\n    routes.push(...routesPerController);\r\n  });\r\n  routes.sort((a, b) => (a.route < b.route ? -1 : (a.route > b.route ? 1 : 0)));\r\n  let rendered = Mustache.render(templateRoutes, {\r\n    routes\r\n  });\r\n  fs.writeFileSync(fileNameRoutes, rendered);\r\n}"]}